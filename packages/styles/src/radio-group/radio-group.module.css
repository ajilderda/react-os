.radio-group {
  display: flex;
  flex-direction: column;
  gap: 20px; /* TODO: use a variable */

  &__item {
    display: flex;
    gap: 8px; /* TODO: use a variable */
  }

  &__indicator {
    --indicatorFill: var(--dui-windows-fill_color-text_on_accent-primary);

    align-items: center;
    display: flex;
    flex: 0 0 auto;
    justify-content: center;
    width: 100%;
    height: 100%;
    position: relative;

    &:after {
      content: "";
      display: block;
      border-radius: 50%;
      background-color: var(--indicatorFill);
      height: 12px;
      width: 12px;

      &:active:not([data-state="checked"]) {
        height: 10px;
        width: 10px;
      }
    }
  }

  &__label {
    margin-top: -1px;
  }

  &__button,
  &__input {
    all: unset;
    width: 18px;
    height: 18px;
    border-radius: 100%;
    border-width: 1px;
    border-style: solid;
    display: flex;
    align-items: center;
    justify-content: center;

    @mixin controlColors;
  }

  /* 1. Radix radio button */
  &__button {
    &:active:not([disabled]) {
      .radio-group__indicator:after {
        height: 10px;
        width: 10px;
      }
    }
  }

  /* 
    For now there's only one implementation of a radio button, one that is
    compatible with Radix' Primitives. We probably also want a native
    input[type="radio"]-implementation which can be used without Radix.

    <input
      name="radio-group"
      class="radio-group__input"
      type="radio"
      checked
      value="foo_input"
      id="foo_input"
    />
    <label class="radio-group__label" for="foo_input" role="label">
      Foo
    </label>
  */

  /* 
    // The following is a quick-and-dirty native
    // input[type="radio"]-implementation that needs to be cleaned up and adjusted
    // according to the specs.
    
    &__input {
      appearance: none;
      all: unset;
      width: 18px;
      height: 18px;
      border-radius: 100%;
      border-width: 1px;
      border-style: solid;
      display: flex;
      align-items: center;
      justify-content: center;

      @mixin controlColors;

      &:checked,
      &:active {
        box-shadow: inset 0 0 0 var(--box-shadow-size, 3px) var(--fill);
        background: var(--symbol);
        border-color: var(--fill);
      }
      &:active:not(:checked) {
        box-shadow: inset 0 0 0 var(--box-shadow-size, 3px) var(--fill);
        background: var(--symbol);
        border-color: var(--border);
        --box-shadow-size: 4px;
      }
    }
  */
}
